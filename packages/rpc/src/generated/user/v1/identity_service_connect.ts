// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file user/v1/identity_service.proto (package code.user.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetLoginForThirdPartyAppRequest, GetLoginForThirdPartyAppResponse, GetUserRequest, GetUserResponse, LinkAccountRequest, LinkAccountResponse, LoginToThirdPartyAppRequest, LoginToThirdPartyAppResponse, UnlinkAccountRequest, UnlinkAccountResponse } from "./identity_service_pb";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service code.user.v1.Identity
 */
export const Identity = {
  typeName: "code.user.v1.Identity",
  methods: {
    /**
     * LinkAccount links an owner account to the user identified and authenticated
     * by a one-time use token.
     *
     * Notably, this RPC has the following side effects:
     *   * A new user is automatically created if one doesn't exist.
     *   * Server will create a new data container for at least every unique
     *     owner account linked to the user.
     *
     * @generated from rpc code.user.v1.Identity.LinkAccount
     */
    linkAccount: {
      name: "LinkAccount",
      I: LinkAccountRequest,
      O: LinkAccountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UnlinkAccount removes links from an owner account. It will NOT remove
     * existing associations between users, owner accounts and identifying
     * features.
     *
     * The following associations will remain intact to ensure owner accounts
     * can continue to be used with a consistent login experience:
     *   * the user continues to be associated to existing owner accounts and
     *     identifying features
     *
     * Client can continue mainting their current login session. Their current
     * user and data container will remain the same.
     *
     * The call is guaranteed to be idempotent. It will not fail if the link is
     * already removed by either a previous call to this RPC or by a more recent
     * call to LinkAccount. A failure will only occur if the link between a user
     * and the owner accout or identifying feature never existed.
     *
     * @generated from rpc code.user.v1.Identity.UnlinkAccount
     */
    unlinkAccount: {
      name: "UnlinkAccount",
      I: UnlinkAccountRequest,
      O: UnlinkAccountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetUser gets user information given a user identifier and an owner account.
     *
     * @generated from rpc code.user.v1.Identity.GetUser
     */
    getUser: {
      name: "GetUser",
      I: GetUserRequest,
      O: GetUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * LoginToThirdPartyApp logs a user into a third party app for a given intent
     * ID. If the original request requires payment, then SubmitIntent must be called.
     *
     * @generated from rpc code.user.v1.Identity.LoginToThirdPartyApp
     */
    loginToThirdPartyApp: {
      name: "LoginToThirdPartyApp",
      I: LoginToThirdPartyAppRequest,
      O: LoginToThirdPartyAppResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetLoginForThirdPartyApp gets a login for a third party app from an existing
     * request. This endpoint supports all paths where login is possible (login on payment,
     * raw login, etc.).
     *
     * @generated from rpc code.user.v1.Identity.GetLoginForThirdPartyApp
     */
    getLoginForThirdPartyApp: {
      name: "GetLoginForThirdPartyApp",
      I: GetLoginForThirdPartyAppRequest,
      O: GetLoginForThirdPartyAppResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

