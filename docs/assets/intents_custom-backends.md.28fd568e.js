import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.0c8e00f4.js";const F=JSON.parse('{"title":"Code API","description":"","frontmatter":{},"headers":[],"relativePath":"intents/custom-backends.md","filePath":"intents/custom-backends.md"}'),p={name:"intents/custom-backends.md"},o=l(`<h1 id="introduction" tabindex="-1">Code API <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Code API {#introduction}&quot;">​</a></h1><p>The Code API is a <a href="https://grpc.io/" target="_blank" rel="noreferrer">gRPC API</a> service designed to handle various actions such as creating <code>Payment Requests</code>, <code>Login With Code</code>, checking intent status, and more. Being language-agnostic, you can use any programming language that supports gRPC to interact with the Code API.</p><p>If you require a feature that isn&#39;t yet supported by our SDKs, you can directly call the Code API. This approach is particularly useful if you&#39;re working with an unsupported language or need to implement something more custom.</p><div class="info custom-block"><p class="custom-block-title">Recommendation</p><p>When possible, we encourage using our SDKs to interact with the Code API. The SDKs manage the low-level details of constructing the binary blob that represents the payment Intent and signing it with the <a href="./../reference/rendezvous.html">rendezvous key</a>.</p></div><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started {#getting-started}&quot;">​</a></h2><p>To begin using the Code API, follow these steps:</p><ol><li><strong>Fimilarize yourself with <a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noreferrer">Protobuf</a></strong>, the serialization format used by the Code API.</li><li><strong>Locate the <a href="https://github.com/code-payments/code-protobuf-api" target="_blank" rel="noreferrer">Protobuf Definition</a></strong> for the message you intend to send.</li><li><strong>Construct the binary blob</strong> representing the message.</li><li><strong>Sign the binary blob</strong> with your <a href="./../reference/rendezvous.html">rendezvous key</a>.</li><li><strong>Send the signed binary blob</strong> to the Code API.</li></ol><p>The Code API supports a wide range of messages, each with its own Protobuf definition for request and response structures.</p><h2 id="protobuf" tabindex="-1">Protobuf <a class="header-anchor" href="#protobuf" aria-label="Permalink to &quot;Protobuf {#protobuf}&quot;">​</a></h2><p>We use <a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noreferrer">Protocol Buffers</a> (protobuf) to define the structure of messages sent to and received from the Code API.</p><p>A protobuf definition is a way to define the structure of a message; simply a text file with a <code>.proto</code> extension. This file can be compiled into source code for many different languages. These can then be used to serialize and deserialize messages into a binary format (more compact).</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">syntax</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;proto3&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// Field number 1</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int32</span><span style="color:#E1E4E8;"> age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;   </span><span style="color:#6A737D;">// Field number 2</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">syntax</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;proto3&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// Field number 1</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int32</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;   </span><span style="color:#6A737D;">// Field number 2</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>All the protobuf definitions for the Code API can be found <a href="https://github.com/code-payments/code-protobuf-api" target="_blank" rel="noreferrer">here</a>. Nearly every language has a protobuf library that can be used to construct the binary blob. <strong>You can also construct the binary blob by hand</strong>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can play around with the <a href="https://www.protobufpal.com/" target="_blank" rel="noreferrer">Protobuf Playground</a> to get a feel for how it works.</p></div><p>If you&#39;re unsure about the content of a signed message, how to construct it, where to submit it, or how to verify it, please take a look at the <a href="https://github.com/code-payments/code-sdk/blob/main/packages/intents/src/intents/" target="_blank" rel="noreferrer">TypeScript</a> intents. These are the most up-to-date and accurate representations of the signed messages.</p><h2 id="grpc" tabindex="-1">gRPC <a class="header-anchor" href="#grpc" aria-label="Permalink to &quot;gRPC {#grpc}&quot;">​</a></h2><p>While we use <code>protobuf</code> to define the structure of messages, we use <code>gRPC</code> to send and receive these messages. The gRPC protocol is a high-performance, open-source, universal RPC framework. It is designed and maintained by Google.</p><p>We make use of gRPC tooling that generates client and server code in multiple languages, making it easy to interact with the Code API.</p><h3 id="grpc-proxy" tabindex="-1">Web Proxy <a class="header-anchor" href="#grpc-proxy" aria-label="Permalink to &quot;Web Proxy {#grpc-proxy}&quot;">​</a></h3><p>Typically, gRPC requires a direct socket connection to the server. However, this can be difficult to set up in some environments. <strong>Specifically, it can be challenging to use gRPC in a browser environment</strong>.</p><p>We provide a custom <code>HTTP/1.1</code> gRPC proxy that you can use to interact with the Code API without needing to open a socket connection. This is far easier than opening a socket connection and is the recommended way to interact with the Code API. You can also run the proxy on your own server if you&#39;d like.</p><p>Additionally, the proxy is available over HTTP/1.1, which means you can use it in a browser environment.</p><div class="info custom-block"><p class="custom-block-title">Recommendation</p><p>We recommend using the gRPC proxy to interact with the Code API. It allows you to use simple <code>fetch(...)</code> requests to interact with the API instead of opening a socket connection.</p></div><h2 id="endpoints" tabindex="-1">Mainnet Endpoints <a class="header-anchor" href="#endpoints" aria-label="Permalink to &quot;Mainnet Endpoints {#endpoints}&quot;">​</a></h2><p>You can use the following URLs to interact with the Code API:</p><p><strong>Proxy URL (HTTP/1.1)</strong></p><div class="language-raw vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">raw</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">https://api.getcode.com/v1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">https://api.getcode.com/v1</span></span></code></pre></div><p>Or you can use the direct gRPC URL, which does require a grpc socket connection.</p><p><strong>Direct gRPC URL (HTTP/2)</strong></p><div class="language-raw vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">raw</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">https://api.codeinfra.net</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">https://api.codeinfra.net</span></span></code></pre></div><h2 id="building-a-client" tabindex="-1">Building Your Own Client <a class="header-anchor" href="#building-a-client" aria-label="Permalink to &quot;Building Your Own Client {#building-a-client}&quot;">​</a></h2><p>When the SDK doesn’t yet support a feature you need, you can build your own client to interact directly with the Code API. In this section, we explain the Code API <code>envelope protocol</code> and provide minimal examples using JavaScript, Python, PHP, and Go.</p><h3 id="request-response-protocol-http-1-1" tabindex="-1">Request/Response Protocol (HTTP/1.1) <a class="header-anchor" href="#request-response-protocol-http-1-1" aria-label="Permalink to &quot;Request/Response Protocol (HTTP/1.1)&quot;">​</a></h3><p>The Code API wraps your inner messages (such as a payment or login Intent) in a simple envelope defined using Protocol Buffers. If you&#39;re using our <code>HTTP/2</code> endpoint, you can skip this section.</p><p>The proto definitions are:</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">syntax</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;proto3&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Request</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> version </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> service </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> method </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bytes</span><span style="color:#E1E4E8;"> body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Response</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Result</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bytes</span><span style="color:#E1E4E8;"> body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Result</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        OK </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ERROR </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">syntax</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;proto3&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Request</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> version </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> service </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> method </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bytes</span><span style="color:#24292E;"> body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Response</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Result</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bytes</span><span style="color:#24292E;"> body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Result</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        OK </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        ERROR </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="request-fields" tabindex="-1">Request Fields: <a class="header-anchor" href="#request-fields" aria-label="Permalink to &quot;Request Fields:&quot;">​</a></h4><ul><li><strong>version</strong>: The API version (e.g. <code>&quot;1.0&quot;</code>).</li><li><strong>service</strong>: The target service (e.g. <code>&quot;Intents&quot;</code>).</li><li><strong>method</strong>: The method to invoke (e.g. <code>&quot;createIntent&quot;</code>).</li><li><strong>body</strong>: The binary-serialized payload of your inner message.</li></ul><h4 id="response-fields" tabindex="-1">Response Fields: <a class="header-anchor" href="#response-fields" aria-label="Permalink to &quot;Response Fields:&quot;">​</a></h4><ul><li><strong>result</strong>: The outcome of the request (<code>OK</code> or <code>ERROR</code>).</li><li><strong>body</strong>: The binary-encoded response payload.</li></ul><p>For example, the following <code>Request</code>:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;version&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;service&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Intents&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;method&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;createIntent&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;body&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;version&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;service&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Intents&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;method&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;createIntent&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;body&quot;</span><span style="color:#24292E;">: [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Serializes to the following hex string:</p><div class="language-raw vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">raw</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">0a03312e301207496e74656e74731a0c637265617465496e74656e74220401020304</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">0a03312e301207496e74656e74731a0c637265617465496e74656e74220401020304</span></span></code></pre></div><h3 id="sending-a-request" tabindex="-1">Sending a Request <a class="header-anchor" href="#sending-a-request" aria-label="Permalink to &quot;Sending a Request&quot;">​</a></h3><p>Below is a minimal JavaScript example that wraps your protobuf-serialized payload in a <code>Request</code> envelope and sends it via <code>HTTP/1.1</code> POST.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-SBw8s" id="tab-T7icyUe" checked="checked"><label for="tab-T7icyUe">js</label><input type="radio" name="group-SBw8s" id="tab-dJ12nR5"><label for="tab-dJ12nR5">python</label><input type="radio" name="group-SBw8s" id="tab-jxzRqoG"><label for="tab-jxzRqoG">php</label><input type="radio" name="group-SBw8s" id="tab-GsP-U3G"><label for="tab-GsP-U3G">go</label></div><div class="blocks"><div class="language-javascript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Request, Response } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@code-wallet/rpc&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Assume you already have your payload message </span></span>
<span class="line"><span style="color:#6A737D;">// (e.g. a payment or login Intent) that has been </span></span>
<span class="line"><span style="color:#6A737D;">// encoded (and signed) using its protobuf definition.</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">payload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> myProtoMessage.</span><span style="color:#B392F0;">toBinary</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Wrap the payload in a Request envelope</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">envelope</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Request</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  version: </span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  service: </span><span style="color:#9ECBFF;">&quot;Intents&quot;</span><span style="color:#E1E4E8;">,     </span><span style="color:#6A737D;">// e.g. &quot;Intents&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&quot;createIntent&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// e.g. &quot;createIntent&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  body: payload,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Serialize the envelope to binary</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">binaryEnvelope</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> envelope.</span><span style="color:#B392F0;">toBinary</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Send the binary envelope using an HTTP POST</span></span>
<span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://api.getcode.com/api/&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  headers: { </span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;application/octet-stream&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  body: binaryEnvelope,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">arrayBuffer</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">buffer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Decode the response envelope from binary</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">resEnvelope</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Response.</span><span style="color:#B392F0;">fromBinary</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(buffer));</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Received response:&quot;</span><span style="color:#E1E4E8;">, resEnvelope);</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Network error:&quot;</span><span style="color:#E1E4E8;">, err));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Request, Response } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@code-wallet/rpc&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Assume you already have your payload message </span></span>
<span class="line"><span style="color:#6A737D;">// (e.g. a payment or login Intent) that has been </span></span>
<span class="line"><span style="color:#6A737D;">// encoded (and signed) using its protobuf definition.</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">payload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myProtoMessage.</span><span style="color:#6F42C1;">toBinary</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Wrap the payload in a Request envelope</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">envelope</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Request</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  version: </span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  service: </span><span style="color:#032F62;">&quot;Intents&quot;</span><span style="color:#24292E;">,     </span><span style="color:#6A737D;">// e.g. &quot;Intents&quot;</span></span>
<span class="line"><span style="color:#24292E;">  method: </span><span style="color:#032F62;">&quot;createIntent&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// e.g. &quot;createIntent&quot;</span></span>
<span class="line"><span style="color:#24292E;">  body: payload,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Serialize the envelope to binary</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">binaryEnvelope</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> envelope.</span><span style="color:#6F42C1;">toBinary</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Send the binary envelope using an HTTP POST</span></span>
<span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://api.getcode.com/api/&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  method: </span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  headers: { </span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;application/octet-stream&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  body: binaryEnvelope,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">arrayBuffer</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">buffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Decode the response envelope from binary</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">resEnvelope</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Response.</span><span style="color:#6F42C1;">fromBinary</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(buffer));</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Received response:&quot;</span><span style="color:#24292E;">, resEnvelope);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">err</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Network error:&quot;</span><span style="color:#24292E;">, err));</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># We don&#39;t yet have a Python library for encoding/decoding </span></span>
<span class="line"><span style="color:#6A737D;"># the CodeAPI protobuf messages. </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># However, you can build your own.</span></span>
<span class="line"><span style="color:#6A737D;"># More details here: https://protobuf.dev/getting-started/pythontutorial/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># In this example, we&#39;re just going to do it </span></span>
<span class="line"><span style="color:#6A737D;"># manually (not recommended but simple).</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encode_varint</span><span style="color:#E1E4E8;">(value):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;Encode an integer as a protobuf varint.&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bytearray</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        to_write </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">7F</span></span>
<span class="line"><span style="color:#E1E4E8;">        value </span><span style="color:#F97583;">&gt;&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> value:</span></span>
<span class="line"><span style="color:#E1E4E8;">            result.append(to_write </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            result.append(to_write)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bytes</span><span style="color:#E1E4E8;">(result)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encode_length_delimited</span><span style="color:#E1E4E8;">(field_number, data_bytes):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    Encode a length-delimited field.</span></span>
<span class="line"><span style="color:#9ECBFF;">    For proto fields of type string or bytes:</span></span>
<span class="line"><span style="color:#9ECBFF;">      - Tag: (field_number &lt;&lt; 3) | 2 (wire type 2)</span></span>
<span class="line"><span style="color:#9ECBFF;">      - Length: varint-encoded length of data_bytes</span></span>
<span class="line"><span style="color:#9ECBFF;">      - Value: the raw bytes</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    tag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (field_number </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> encode_varint(tag) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> encode_varint(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(data_bytes)) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> data_bytes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Prepare the fields for the Request message.</span></span>
<span class="line"><span style="color:#E1E4E8;">version </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#E1E4E8;">.encode(</span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">service </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Intents&quot;</span><span style="color:#E1E4E8;">.encode(</span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">method  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;createIntent&quot;</span><span style="color:#E1E4E8;">.encode(</span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">body    </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bytes</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">])  </span><span style="color:#6A737D;"># Example payload</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Manually serialize the Request message by concatenating each field.</span></span>
<span class="line"><span style="color:#E1E4E8;">serialized </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    encode_length_delimited(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, version) </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">    encode_length_delimited(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, service) </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">    encode_length_delimited(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, method) </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">    encode_length_delimited(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, body)</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># The expected hex serialization:</span></span>
<span class="line"><span style="color:#6A737D;"># 0a03312e301207496e74656e74731a0c637265617465496e74656e74220401020304</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Serialized Request:&quot;</span><span style="color:#E1E4E8;">, serialized.hex())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Send the serialized request via HTTP POST.</span></span>
<span class="line"><span style="color:#E1E4E8;">response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.post(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;https://api.getcode.com/api/&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">headers</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;application/octet-stream&quot;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">serialized</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> response.ok:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># For demonstration, print the raw response bytes in hex.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Response:&quot;</span><span style="color:#E1E4E8;">, response.content.hex())</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Request failed with status code:&quot;</span><span style="color:#E1E4E8;">, response.status_code)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># We don&#39;t yet have a Python library for encoding/decoding </span></span>
<span class="line"><span style="color:#6A737D;"># the CodeAPI protobuf messages. </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># However, you can build your own.</span></span>
<span class="line"><span style="color:#6A737D;"># More details here: https://protobuf.dev/getting-started/pythontutorial/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># In this example, we&#39;re just going to do it </span></span>
<span class="line"><span style="color:#6A737D;"># manually (not recommended but simple).</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encode_varint</span><span style="color:#24292E;">(value):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;Encode an integer as a protobuf varint.&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bytearray</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        to_write </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">7F</span></span>
<span class="line"><span style="color:#24292E;">        value </span><span style="color:#D73A49;">&gt;&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> value:</span></span>
<span class="line"><span style="color:#24292E;">            result.append(to_write </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            result.append(to_write)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bytes</span><span style="color:#24292E;">(result)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encode_length_delimited</span><span style="color:#24292E;">(field_number, data_bytes):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    Encode a length-delimited field.</span></span>
<span class="line"><span style="color:#032F62;">    For proto fields of type string or bytes:</span></span>
<span class="line"><span style="color:#032F62;">      - Tag: (field_number &lt;&lt; 3) | 2 (wire type 2)</span></span>
<span class="line"><span style="color:#032F62;">      - Length: varint-encoded length of data_bytes</span></span>
<span class="line"><span style="color:#032F62;">      - Value: the raw bytes</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    tag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (field_number </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> encode_varint(tag) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> encode_varint(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(data_bytes)) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> data_bytes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Prepare the fields for the Request message.</span></span>
<span class="line"><span style="color:#24292E;">version </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#24292E;">.encode(</span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">service </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Intents&quot;</span><span style="color:#24292E;">.encode(</span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">method  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;createIntent&quot;</span><span style="color:#24292E;">.encode(</span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">body    </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bytes</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">])  </span><span style="color:#6A737D;"># Example payload</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Manually serialize the Request message by concatenating each field.</span></span>
<span class="line"><span style="color:#24292E;">serialized </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    encode_length_delimited(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, version) </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">    encode_length_delimited(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, service) </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">    encode_length_delimited(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, method) </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">    encode_length_delimited(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, body)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># The expected hex serialization:</span></span>
<span class="line"><span style="color:#6A737D;"># 0a03312e301207496e74656e74731a0c637265617465496e74656e74220401020304</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Serialized Request:&quot;</span><span style="color:#24292E;">, serialized.hex())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Send the serialized request via HTTP POST.</span></span>
<span class="line"><span style="color:#24292E;">response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.post(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;https://api.getcode.com/api/&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">headers</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;application/octet-stream&quot;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">serialized</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> response.ok:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># For demonstration, print the raw response bytes in hex.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Response:&quot;</span><span style="color:#24292E;">, response.content.hex())</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Request failed with status code:&quot;</span><span style="color:#24292E;">, response.status_code)</span></span></code></pre></div><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># We don&#39;t yet have a Php library for encoding/decoding </span></span>
<span class="line"><span style="color:#6A737D;"># the CodeAPI protobuf messages.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># In this example, we&#39;re just going to do it </span></span>
<span class="line"><span style="color:#6A737D;"># manually (not recommended but simple).</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encodeVarint</span><span style="color:#E1E4E8;">($value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    $result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        $toWrite </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $value </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x7F</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        $value </span><span style="color:#F97583;">&gt;&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ($value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            $result </span><span style="color:#F97583;">.=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chr</span><span style="color:#E1E4E8;">($toWrite </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x80</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            $result </span><span style="color:#F97583;">.=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chr</span><span style="color:#E1E4E8;">($toWrite);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encodeLengthDelimited</span><span style="color:#E1E4E8;">($fieldNumber, $dataBytes) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    $tag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ($fieldNumber </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encodeVarint</span><span style="color:#E1E4E8;">($tag) </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encodeVarint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strlen</span><span style="color:#E1E4E8;">($dataBytes)) </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> $dataBytes;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Prepare the fields for the Request message.</span></span>
<span class="line"><span style="color:#E1E4E8;">$version </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">$service </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Intents&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">$method  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;createIntent&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">$body    </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// Example payload</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Manually serialize the Request message.</span></span>
<span class="line"><span style="color:#E1E4E8;">$serialized </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">encodeLengthDelimited</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, $version) </span><span style="color:#F97583;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">encodeLengthDelimited</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, $service) </span><span style="color:#F97583;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">encodeLengthDelimited</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, $method) </span><span style="color:#F97583;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">encodeLengthDelimited</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, $body);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Serialized Request: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bin2hex</span><span style="color:#E1E4E8;">($serialized) </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Send the serialized request via HTTP POST using cURL.</span></span>
<span class="line"><span style="color:#E1E4E8;">$ch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">curl_init</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://api.getcode.com/api/&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">curl_setopt</span><span style="color:#E1E4E8;">($ch, </span><span style="color:#79B8FF;">CURLOPT_POST</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">curl_setopt</span><span style="color:#E1E4E8;">($ch, </span><span style="color:#79B8FF;">CURLOPT_HTTPHEADER</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">array</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type: application/octet-stream&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#79B8FF;">curl_setopt</span><span style="color:#E1E4E8;">($ch, </span><span style="color:#79B8FF;">CURLOPT_POSTFIELDS</span><span style="color:#E1E4E8;">, $serialized);</span></span>
<span class="line"><span style="color:#79B8FF;">curl_setopt</span><span style="color:#E1E4E8;">($ch, </span><span style="color:#79B8FF;">CURLOPT_RETURNTRANSFER</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">curl_exec</span><span style="color:#E1E4E8;">($ch);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">curl_errno</span><span style="color:#E1E4E8;">($ch)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Request failed: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">curl_error</span><span style="color:#E1E4E8;">($ch) </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Response: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bin2hex</span><span style="color:#E1E4E8;">($response) </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">curl_close</span><span style="color:#E1E4E8;">($ch);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># We don&#39;t yet have a Php library for encoding/decoding </span></span>
<span class="line"><span style="color:#6A737D;"># the CodeAPI protobuf messages.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># In this example, we&#39;re just going to do it </span></span>
<span class="line"><span style="color:#6A737D;"># manually (not recommended but simple).</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encodeVarint</span><span style="color:#24292E;">($value) {</span></span>
<span class="line"><span style="color:#24292E;">    $result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        $toWrite </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $value </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x7F</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        $value </span><span style="color:#D73A49;">&gt;&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ($value) {</span></span>
<span class="line"><span style="color:#24292E;">            $result </span><span style="color:#D73A49;">.=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chr</span><span style="color:#24292E;">($toWrite </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x80</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            $result </span><span style="color:#D73A49;">.=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chr</span><span style="color:#24292E;">($toWrite);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encodeLengthDelimited</span><span style="color:#24292E;">($fieldNumber, $dataBytes) {</span></span>
<span class="line"><span style="color:#24292E;">    $tag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ($fieldNumber </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encodeVarint</span><span style="color:#24292E;">($tag) </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encodeVarint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strlen</span><span style="color:#24292E;">($dataBytes)) </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> $dataBytes;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Prepare the fields for the Request message.</span></span>
<span class="line"><span style="color:#24292E;">$version </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">$service </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Intents&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">$method  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;createIntent&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">$body    </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// Example payload</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Manually serialize the Request message.</span></span>
<span class="line"><span style="color:#24292E;">$serialized </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">encodeLengthDelimited</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, $version) </span><span style="color:#D73A49;">.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">encodeLengthDelimited</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, $service) </span><span style="color:#D73A49;">.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">encodeLengthDelimited</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, $method) </span><span style="color:#D73A49;">.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">encodeLengthDelimited</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, $body);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Serialized Request: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bin2hex</span><span style="color:#24292E;">($serialized) </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Send the serialized request via HTTP POST using cURL.</span></span>
<span class="line"><span style="color:#24292E;">$ch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">curl_init</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://api.getcode.com/api/&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">curl_setopt</span><span style="color:#24292E;">($ch, </span><span style="color:#005CC5;">CURLOPT_POST</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">curl_setopt</span><span style="color:#24292E;">($ch, </span><span style="color:#005CC5;">CURLOPT_HTTPHEADER</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">array</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Type: application/octet-stream&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#005CC5;">curl_setopt</span><span style="color:#24292E;">($ch, </span><span style="color:#005CC5;">CURLOPT_POSTFIELDS</span><span style="color:#24292E;">, $serialized);</span></span>
<span class="line"><span style="color:#005CC5;">curl_setopt</span><span style="color:#24292E;">($ch, </span><span style="color:#005CC5;">CURLOPT_RETURNTRANSFER</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">curl_exec</span><span style="color:#24292E;">($ch);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">curl_errno</span><span style="color:#24292E;">($ch)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Request failed: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">curl_error</span><span style="color:#24292E;">($ch) </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Response: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bin2hex</span><span style="color:#24292E;">($response) </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">curl_close</span><span style="color:#24292E;">($ch);</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">bytes</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">encoding/hex</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">io/ioutil</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">net/http</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// You can use our library to encode/decode the CodeAPI protobuf messages.</span></span>
<span class="line"><span style="color:#6A737D;">// https://github.com/code-payments/code-protobuf-api/tree/main/generated/go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// We&#39;re going to do it manually (not recommended but simple).</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encodeVarint</span><span style="color:#E1E4E8;">(value </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;">) []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> buf []</span><span style="color:#F97583;">byte</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		b </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(value </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">7F</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		value </span><span style="color:#F97583;">&gt;&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			buf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(buf, b</span><span style="color:#F97583;">|0x</span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			buf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(buf, b)</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> buf</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encodeLengthDelimited</span><span style="color:#E1E4E8;">(fieldNumber </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, data []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">) []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	tag </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uint64</span><span style="color:#E1E4E8;">((fieldNumber </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> buf bytes.Buffer</span></span>
<span class="line"><span style="color:#E1E4E8;">	buf.</span><span style="color:#79B8FF;">Write</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">encodeVarint</span><span style="color:#E1E4E8;">(tag))</span></span>
<span class="line"><span style="color:#E1E4E8;">	buf.</span><span style="color:#79B8FF;">Write</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">encodeVarint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">uint64</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(data))))</span></span>
<span class="line"><span style="color:#E1E4E8;">	buf.</span><span style="color:#79B8FF;">Write</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> buf.</span><span style="color:#79B8FF;">Bytes</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	version </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	service </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Intents&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	method </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;createIntent&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	body </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">} </span><span style="color:#6A737D;">// Example payload</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> serialized bytes.Buffer</span></span>
<span class="line"><span style="color:#E1E4E8;">	serialized.</span><span style="color:#79B8FF;">Write</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">encodeLengthDelimited</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, version))</span></span>
<span class="line"><span style="color:#E1E4E8;">	serialized.</span><span style="color:#79B8FF;">Write</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">encodeLengthDelimited</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, service))</span></span>
<span class="line"><span style="color:#E1E4E8;">	serialized.</span><span style="color:#79B8FF;">Write</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">encodeLengthDelimited</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, method))</span></span>
<span class="line"><span style="color:#E1E4E8;">	serialized.</span><span style="color:#79B8FF;">Write</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">encodeLengthDelimited</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, body))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	serializedBytes </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> serialized.</span><span style="color:#79B8FF;">Bytes</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Serialized Request:&quot;</span><span style="color:#E1E4E8;">, hex.</span><span style="color:#79B8FF;">EncodeToString</span><span style="color:#E1E4E8;">(serializedBytes))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Send HTTP POST</span></span>
<span class="line"><span style="color:#E1E4E8;">	resp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#79B8FF;">Post</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;https://api.getcode.com/api/&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;application/octet-stream&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        bytes.</span><span style="color:#79B8FF;">NewReader</span><span style="color:#E1E4E8;">(serializedBytes)</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Request failed:&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> resp.Body.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	responseBody, _ </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ioutil.</span><span style="color:#79B8FF;">ReadAll</span><span style="color:#E1E4E8;">(resp.Body)</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Response:&quot;</span><span style="color:#E1E4E8;">, hex.</span><span style="color:#79B8FF;">EncodeToString</span><span style="color:#E1E4E8;">(responseBody))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">bytes</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">encoding/hex</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">io/ioutil</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">net/http</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// You can use our library to encode/decode the CodeAPI protobuf messages.</span></span>
<span class="line"><span style="color:#6A737D;">// https://github.com/code-payments/code-protobuf-api/tree/main/generated/go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// We&#39;re going to do it manually (not recommended but simple).</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encodeVarint</span><span style="color:#24292E;">(value </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;">) []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> buf []</span><span style="color:#D73A49;">byte</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		b </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(value </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">7F</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		value </span><span style="color:#D73A49;">&gt;&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			buf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(buf, b</span><span style="color:#D73A49;">|0x</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			buf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(buf, b)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> buf</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encodeLengthDelimited</span><span style="color:#24292E;">(fieldNumber </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, data []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">) []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	tag </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uint64</span><span style="color:#24292E;">((fieldNumber </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> buf bytes.Buffer</span></span>
<span class="line"><span style="color:#24292E;">	buf.</span><span style="color:#005CC5;">Write</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">encodeVarint</span><span style="color:#24292E;">(tag))</span></span>
<span class="line"><span style="color:#24292E;">	buf.</span><span style="color:#005CC5;">Write</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">encodeVarint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">uint64</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(data))))</span></span>
<span class="line"><span style="color:#24292E;">	buf.</span><span style="color:#005CC5;">Write</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> buf.</span><span style="color:#005CC5;">Bytes</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	version </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	service </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Intents&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	method </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;createIntent&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	body </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">} </span><span style="color:#6A737D;">// Example payload</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> serialized bytes.Buffer</span></span>
<span class="line"><span style="color:#24292E;">	serialized.</span><span style="color:#005CC5;">Write</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">encodeLengthDelimited</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, version))</span></span>
<span class="line"><span style="color:#24292E;">	serialized.</span><span style="color:#005CC5;">Write</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">encodeLengthDelimited</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, service))</span></span>
<span class="line"><span style="color:#24292E;">	serialized.</span><span style="color:#005CC5;">Write</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">encodeLengthDelimited</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, method))</span></span>
<span class="line"><span style="color:#24292E;">	serialized.</span><span style="color:#005CC5;">Write</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">encodeLengthDelimited</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, body))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	serializedBytes </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> serialized.</span><span style="color:#005CC5;">Bytes</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Serialized Request:&quot;</span><span style="color:#24292E;">, hex.</span><span style="color:#005CC5;">EncodeToString</span><span style="color:#24292E;">(serializedBytes))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Send HTTP POST</span></span>
<span class="line"><span style="color:#24292E;">	resp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> http.</span><span style="color:#005CC5;">Post</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;https://api.getcode.com/api/&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;application/octet-stream&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        bytes.</span><span style="color:#005CC5;">NewReader</span><span style="color:#24292E;">(serializedBytes)</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Request failed:&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> resp.Body.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	responseBody, _ </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ioutil.</span><span style="color:#005CC5;">ReadAll</span><span style="color:#24292E;">(resp.Body)</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Response:&quot;</span><span style="color:#24292E;">, hex.</span><span style="color:#005CC5;">EncodeToString</span><span style="color:#24292E;">(responseBody))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></div></div><p>The above examples show how to construct a <code>Request</code> envelope and send it to the Code API. The response is also wrapped in a <code>Response</code> envelope. You can then extract the binary-encoded payload from the response and decode it using the appropriate protobuf definition.</p><p>You can learn more about the payload structure below.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Take a look at the following client implementations that use our <code>HTTP/1.1</code> gRPC proxy.</p><ul><li><a href="https://github.com/code-payments/code-sdk/blob/94c5cfa6dc84d380a60b9651b17ddad23b7ad3dc/packages/client/src/client.ts#L50-L55" target="_blank" rel="noreferrer">TypeScript Client</a></li><li><a href="https://github.com/code-payments/code-sdk-python/blob/2c88e663ccc5e89edb93db5f931bdadb42ccfc1d/code_wallet/client/connection.py#L43-L65" target="_blank" rel="noreferrer">Python Client</a></li><li><a href="https://github.com/code-payments/code-sdk-go/blob/34915b560481a6db8035433dabc2897e388ba8d7/sdk/client.go#L71-L85" target="_blank" rel="noreferrer">Go Client</a></li><li><a href="https://github.com/code-payments/code-sdk-php/blob/0a2fd9a50706953c3d991a7eca4db014ce496975/src/client/Connection.php#L49-L79" target="_blank" rel="noreferrer">PHP Client</a></li></ul></div><h3 id="http-2-grpc-endpoint" tabindex="-1">HTTP/2 gRPC Endpoint <a class="header-anchor" href="#http-2-grpc-endpoint" aria-label="Permalink to &quot;HTTP/2 gRPC Endpoint&quot;">​</a></h3><p>Additionally, you can also use our <code>HTTP/2</code> gRPC endpoint directly. This requires a gRPC client library that supports gRPC over <code>HTTP/2</code>.</p><p>Our golang, iOS and Android SDKs use this method.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Take a look at the following client implementations that use our <code>HTTP/2</code> gRPC endpoint directly.</p><ul><li><a href="https://github.com/code-payments/code-protobuf-api/tree/main/generated/go" target="_blank" rel="noreferrer">Go Client</a></li><li><a href="https://github.com/code-payments/code-ios-app/tree/main/CodeServices/Sources/CodeServices/API" target="_blank" rel="noreferrer">Swift Client</a></li><li><a href="https://github.com/code-payments/code-android-app/tree/main/api" target="_blank" rel="noreferrer">Kotlin Client</a></li></ul></div><h2 id="intents" tabindex="-1">Intents <a class="header-anchor" href="#intents" aria-label="Permalink to &quot;Intents {#intents}&quot;">​</a></h2><p>Code uses the concept of an <a href="./../intents/introduction.html">Intent</a> to represent a user&#39;s desired actions. This is different from a blockchain transaction. An Intent is a higher-level abstraction.</p><p>The Code Sequencer expects a binary blob that represents the Intent. The binary blob is constructed using the protobuf definition. When you call the <code>createIntent</code> API, you&#39;ll need to construct the binary blob yourself and sign it with the <a href="./../reference/rendezvous.html">rendezvous key</a>.</p><p>We have several Intent types, such as <code>RequestToReceiveBill</code>, <code>RequestToPayBill</code>, and <code>RequestToLogin</code>. Each Intent type has its own protobuf definition.</p><p>At a high level, the Intent structure looks like this:</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">MessageId</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Signature</span><span style="color:#E1E4E8;"> send_message_request_signature </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">oneof</span><span style="color:#E1E4E8;"> kind {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">RequestToGrabBill</span><span style="color:#E1E4E8;">     request_to_grab_bill     </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">RequestToReceiveBill</span><span style="color:#E1E4E8;">  request_to_receive_bill  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">CodeScanned</span><span style="color:#E1E4E8;">           code_scanned             </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">ClientRejectedPayment</span><span style="color:#E1E4E8;"> client_rejected_payment  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">IntentSubmitted</span><span style="color:#E1E4E8;">       intent_submitted         </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">WebhookCalled</span><span style="color:#E1E4E8;">         webhook_called           </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">RequestToLogin</span><span style="color:#E1E4E8;">        request_to_login         </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">ClientRejectedLogin</span><span style="color:#E1E4E8;">   client_rejected_login    </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">AirdropReceived</span><span style="color:#E1E4E8;">       airdrop_received         </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">MessageId</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Signature</span><span style="color:#24292E;"> send_message_request_signature </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">oneof</span><span style="color:#24292E;"> kind {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">RequestToGrabBill</span><span style="color:#24292E;">     request_to_grab_bill     </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">RequestToReceiveBill</span><span style="color:#24292E;">  request_to_receive_bill  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">CodeScanned</span><span style="color:#24292E;">           code_scanned             </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">ClientRejectedPayment</span><span style="color:#24292E;"> client_rejected_payment  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">IntentSubmitted</span><span style="color:#24292E;">       intent_submitted         </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">WebhookCalled</span><span style="color:#24292E;">         webhook_called           </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">RequestToLogin</span><span style="color:#24292E;">        request_to_login         </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">ClientRejectedLogin</span><span style="color:#24292E;">   client_rejected_login    </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">AirdropReceived</span><span style="color:#24292E;">       airdrop_received         </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>The SDKs are basically wrappers around this protobuf definition. They construct the binary blob for you and sign it with the rendezvous key. If you&#39;d like to use a custom backend or a language that isn&#39;t supported yet, it is possible to call our <code>createIntent</code> API directly.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Take a look at the internals of the SDKs to see how the binary blob is constructed and signed. This will give you a good idea of how to construct the binary blob yourself.</p><ul><li><a href="https://github.com/code-payments/code-sdk/tree/94c5cfa6dc84d380a60b9651b17ddad23b7ad3dc/packages/intents/src/intents" target="_blank" rel="noreferrer">TypeScript Example</a></li><li><a href="https://github.com/code-payments/code-sdk-python/blob/main/code_wallet/library/payment_request.py" target="_blank" rel="noreferrer">Python Example</a></li><li><a href="https://github.com/code-payments/code-sdk-go/blob/main/sdk/payment_request.go" target="_blank" rel="noreferrer">Go Example</a></li><li><a href="https://github.com/code-payments/code-sdk-php/tree/main/src/messages" target="_blank" rel="noreferrer">PHP Example</a></li></ul></div><p>Below are some examples of how to construct the binary blob for a payment Intent and a login Intent. These examples are based on the protobuf definitions provided earlier. You&#39;ll need to sign and wrap these payloads in a <code>Request</code> envelope before sending them to the Code API.</p><h3 id="payment-requests" tabindex="-1">Payment Example <a class="header-anchor" href="#payment-requests" aria-label="Permalink to &quot;Payment Example {#payment-requests}&quot;">​</a></h3><p>A typical server-side integration will look something like this:</p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">sequenceDiagram</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">autonumber</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">participant</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">User</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">participant</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">Browser</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">User</span><span style="color:#F97583;">-&gt;&gt;</span><span style="color:#FFAB70;">Browser</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Lands on payment page</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">Browser</span><span style="color:#F97583;">-&gt;&gt;</span><span style="color:#FFAB70;">Server</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Sends order information</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">Server</span><span style="color:#F97583;">-&gt;&gt;</span><span style="color:#FFAB70;">Code Sequencer</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">POST /v1/createIntent</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">Code Sequencer</span><span style="color:#F97583;">-&gt;&gt;</span><span style="color:#FFAB70;">Server</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Returns PaymentIntent status</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">Server</span><span style="color:#F97583;">-&gt;&gt;</span><span style="color:#FFAB70;">Browser</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Returns PaymentIntent&#39;s client_secret</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">Browser</span><span style="color:#F97583;">-&gt;&gt;</span><span style="color:#FFAB70;">Code Sequencer</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Opens message stream at rendezvous value</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">sequenceDiagram</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">autonumber</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">participant</span><span style="color:#24292E;"> </span><span style="color:#E36209;">User</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">participant</span><span style="color:#24292E;"> </span><span style="color:#E36209;">Browser</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">User</span><span style="color:#D73A49;">-&gt;&gt;</span><span style="color:#E36209;">Browser</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Lands on payment page</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">Browser</span><span style="color:#D73A49;">-&gt;&gt;</span><span style="color:#E36209;">Server</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Sends order information</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">Server</span><span style="color:#D73A49;">-&gt;&gt;</span><span style="color:#E36209;">Code Sequencer</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">POST /v1/createIntent</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">Code Sequencer</span><span style="color:#D73A49;">-&gt;&gt;</span><span style="color:#E36209;">Server</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Returns PaymentIntent status</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">Server</span><span style="color:#D73A49;">-&gt;&gt;</span><span style="color:#E36209;">Browser</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Returns PaymentIntent&#39;s client_secret</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">Browser</span><span style="color:#D73A49;">-&gt;&gt;</span><span style="color:#E36209;">Code Sequencer</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Opens message stream at rendezvous value</span></span></code></pre></div><p>You can learn more about the payment flow <a href="./../intents/payment-requests.html">here</a>.</p><p>In order to call the <code>createIntent</code> API manually, you&#39;ll need to construct the payment Intent binary blob yourself and sign it with the <a href="./../reference/rendezvous.html">rendezvous key</a>.</p><p>You can do that one of two ways:</p><ul><li><strong>Use a protobuf library to construct the binary blob</strong></li><li>Construct the binary blob manually</li></ul><p>The protobuf defenition for <code>RequestToReceiveBill</code> is as follows (full definition can be found <a href="https://github.com/code-payments/code-protobuf-api" target="_blank" rel="noreferrer">here</a>):</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">syntax</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;proto3&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SolanaAccountId</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bytes</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Signature</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bytes</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageId</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bytes</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">MessageId</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Signature</span><span style="color:#E1E4E8;"> send_message_request_signature </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">oneof</span><span style="color:#E1E4E8;"> kind {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">RequestToReceiveBill</span><span style="color:#E1E4E8;"> request_to_receive_bill </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RequestToReceiveBill</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">SolanaAccountId</span><span style="color:#E1E4E8;"> requestor_account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">oneof</span><span style="color:#E1E4E8;"> exchange_data {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">ExchangeData</span><span style="color:#E1E4E8;">            exact </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">ExchangeDataWithoutRate</span><span style="color:#E1E4E8;"> partial </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExchangeData</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> currency </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> exchange_rate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> native_amount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;"> quarks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExchangeDataWithoutRate</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> currency </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> native_amount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">syntax</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;proto3&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SolanaAccountId</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bytes</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Signature</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bytes</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageId</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bytes</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">MessageId</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Signature</span><span style="color:#24292E;"> send_message_request_signature </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">oneof</span><span style="color:#24292E;"> kind {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">RequestToReceiveBill</span><span style="color:#24292E;"> request_to_receive_bill </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RequestToReceiveBill</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">SolanaAccountId</span><span style="color:#24292E;"> requestor_account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">oneof</span><span style="color:#24292E;"> exchange_data {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">ExchangeData</span><span style="color:#24292E;">            exact </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">ExchangeDataWithoutRate</span><span style="color:#24292E;"> partial </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExchangeData</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> currency </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> exchange_rate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> native_amount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;"> quarks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExchangeDataWithoutRate</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> currency </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> native_amount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="constructing-the-binary-blob-manually" tabindex="-1">Constructing the binary blob manually <a class="header-anchor" href="#constructing-the-binary-blob-manually" aria-label="Permalink to &quot;Constructing the binary blob manually&quot;">​</a></h4><p>Given the above protobuf definition, you can construct a payment Intent as follows:</p><div class="language-raw vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">raw</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">[</span></span>
<span class="line"><span style="color:#e1e4e8;">  0x2A, 0x34, 0x0A, 0x22, 0x0A, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,</span></span>
<span class="line"><span style="color:#e1e4e8;">  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,</span></span>
<span class="line"><span style="color:#e1e4e8;">  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,</span></span>
<span class="line"><span style="color:#e1e4e8;">  0x00, 0x00, 0x1A, 0x0E, 0x0A, 0x03, 0x75, 0x73, 0x64, 0x11, 0x00, 0x00,</span></span>
<span class="line"><span style="color:#e1e4e8;">  0x00, 0x00, 0x00, 0x00, 0x24, 0x40</span></span>
<span class="line"><span style="color:#e1e4e8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[</span></span>
<span class="line"><span style="color:#24292e;">  0x2A, 0x34, 0x0A, 0x22, 0x0A, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,</span></span>
<span class="line"><span style="color:#24292e;">  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,</span></span>
<span class="line"><span style="color:#24292e;">  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,</span></span>
<span class="line"><span style="color:#24292e;">  0x00, 0x00, 0x1A, 0x0E, 0x0A, 0x03, 0x75, 0x73, 0x64, 0x11, 0x00, 0x00,</span></span>
<span class="line"><span style="color:#24292e;">  0x00, 0x00, 0x00, 0x00, 0x24, 0x40</span></span>
<span class="line"><span style="color:#24292e;">]</span></span></code></pre></div><h4 id="decoding-the-binary-blob" tabindex="-1">Decoding the binary blob <a class="header-anchor" href="#decoding-the-binary-blob" aria-label="Permalink to &quot;Decoding the binary blob&quot;">​</a></h4><p>Let&#39;s decode the given binary serialization based on the protobuf definitions provided earlier.</p><div class="info custom-block"><p class="custom-block-title">Recommendation</p><p>We don&#39;t recommend constructing the binary blob manually unless you have a specific reason to do so. It&#39;s error-prone and can lead to unexpected behavior. Use a protobuf library to construct the binary blob.</p><p><a href="https://protobuf.dev/getting-started/" target="_blank" rel="noreferrer">https://protobuf.dev/getting-started/</a></p></div><h4 id="message-structure" tabindex="-1">Message structure <a class="header-anchor" href="#message-structure" aria-label="Permalink to &quot;Message structure&quot;">​</a></h4><ul><li><code>0x2A</code>: This indicates field number 5 (<code>request_to_receive_bill</code>) with a wire type of 2 (length-delimited).</li><li><code>0x34</code>: The length of the upcoming <code>RequestToReceiveBill</code> message is 52 bytes.</li></ul><h4 id="requesttoreceivebill-structure" tabindex="-1">RequestToReceiveBill structure <a class="header-anchor" href="#requesttoreceivebill-structure" aria-label="Permalink to &quot;RequestToReceiveBill structure&quot;">​</a></h4><ul><li><code>0x0A</code>: This indicates field number 1 (<code>requestor_account</code>) with a wire type of 2 (length-delimited).</li><li><code>0x22</code>: The length of the upcoming <code>SolanaAccountId</code> message is 34 bytes.</li></ul><h4 id="solanaaccountid-structure" tabindex="-1">SolanaAccountId structure <a class="header-anchor" href="#solanaaccountid-structure" aria-label="Permalink to &quot;SolanaAccountId structure&quot;">​</a></h4><ul><li><code>0x0A</code>: This indicates field number 1 (value) with a wire type of 2 (length-delimited).</li><li><code>0x20</code>: The length of the upcoming value is 32 bytes.</li><li>Following 32 bytes: 0x00 x 32: This is the account ID in bytes format, which in our example, is all zeros.</li></ul><h4 id="requesttoreceivebill-structure-continued" tabindex="-1">RequestToReceiveBill structure (continued) <a class="header-anchor" href="#requesttoreceivebill-structure-continued" aria-label="Permalink to &quot;RequestToReceiveBill structure (continued)&quot;">​</a></h4><ul><li><code>0x1A</code>: This indicates field number 3 (partial, which is of type <code>ExchangeDataWithoutRate</code>) with a wire type of 2 (length-delimited).</li><li><code>0x0E</code>: The length of the upcoming <code>ExchangeDataWithoutRate</code> message is 14 bytes.</li></ul><h4 id="exchangedatawithoutrate-structure" tabindex="-1">ExchangeDataWithoutRate structure: <a class="header-anchor" href="#exchangedatawithoutrate-structure" aria-label="Permalink to &quot;ExchangeDataWithoutRate structure:&quot;">​</a></h4><ul><li><code>0x0A</code>: This indicates field number 1 (currency) with a wire type of 2 (length-delimited).</li><li><code>0x03</code>: The length of the currency string is 3 bytes.</li><li>Following 3 bytes: <code>0x75 0x73 0x64</code>: This is ASCII for the string <code>&quot;usd&quot;</code>.</li><li><code>0x11</code>: This indicates field number 2 (native_amount) with a wire type of 1 (64-bit).</li><li>Following 8 bytes: <code>0x00 0x00 0x00 0x00 0x00 0x00 0x24 0x40</code>: This is the number representation of <code>10.0</code> for the native amount.</li></ul><h4 id="decoded-values" tabindex="-1">Decoded values <a class="header-anchor" href="#decoded-values" aria-label="Permalink to &quot;Decoded values&quot;">​</a></h4><p>From this binary serialization, the values decoded are:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">request_to_receive_bill:</span></span>
<span class="line"><span style="color:#e1e4e8;">  requestor_account: 0x00 x 32 (or &#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=&#39; in Base64)</span></span>
<span class="line"><span style="color:#e1e4e8;">  partial:</span></span>
<span class="line"><span style="color:#e1e4e8;">    currency: &quot;usd&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">    native_amount: 10.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">request_to_receive_bill:</span></span>
<span class="line"><span style="color:#24292e;">  requestor_account: 0x00 x 32 (or &#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=&#39; in Base64)</span></span>
<span class="line"><span style="color:#24292e;">  partial:</span></span>
<span class="line"><span style="color:#24292e;">    currency: &quot;usd&quot;</span></span>
<span class="line"><span style="color:#24292e;">    native_amount: 10.0</span></span></code></pre></div><p>This is then signed using the rendezvous key and <code>POST</code>ed to the Code Sequencer&#39;s <code>createIntent</code> endpoint.</p><p>You can see an example of this in our <a href="https://github.com/code-payments/code-sdk-python/blob/main/code_wallet/library/message.py" target="_blank" rel="noreferrer">Python SDK</a>.</p><h3 id="login-intents" tabindex="-1">Login Example <a class="header-anchor" href="#login-intents" aria-label="Permalink to &quot;Login Example {#login-intents}&quot;">​</a></h3><p>The <strong>Login with Code</strong> flow consists of the following steps, you can learn more about the login flow <a href="./../intents/login.html">here</a>.</p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">sequenceDiagram</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">autonumber</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">participant</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">User</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">participant</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">Browser</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">User</span><span style="color:#F97583;">-&gt;&gt;</span><span style="color:#FFAB70;">Browser</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Lands on login page</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">Browser</span><span style="color:#F97583;">-&gt;&gt;</span><span style="color:#FFAB70;">Server</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Sends login request</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">Server</span><span style="color:#F97583;">-&gt;&gt;</span><span style="color:#FFAB70;">Code Sequencer</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">POST /v1/createIntent</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">Code Sequencer</span><span style="color:#F97583;">-&gt;&gt;</span><span style="color:#FFAB70;">Server</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Returns LoginIntent status</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">Server</span><span style="color:#F97583;">-&gt;&gt;</span><span style="color:#FFAB70;">Browser</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Returns LoginIntent&#39;s client_secret</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">Browser</span><span style="color:#F97583;">-&gt;&gt;</span><span style="color:#FFAB70;">Code Sequencer</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Open message stream at rendezvous value</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">sequenceDiagram</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">autonumber</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">participant</span><span style="color:#24292E;"> </span><span style="color:#E36209;">User</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">participant</span><span style="color:#24292E;"> </span><span style="color:#E36209;">Browser</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">User</span><span style="color:#D73A49;">-&gt;&gt;</span><span style="color:#E36209;">Browser</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Lands on login page</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">Browser</span><span style="color:#D73A49;">-&gt;&gt;</span><span style="color:#E36209;">Server</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Sends login request</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">Server</span><span style="color:#D73A49;">-&gt;&gt;</span><span style="color:#E36209;">Code Sequencer</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">POST /v1/createIntent</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">Code Sequencer</span><span style="color:#D73A49;">-&gt;&gt;</span><span style="color:#E36209;">Server</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Returns LoginIntent status</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">Server</span><span style="color:#D73A49;">-&gt;&gt;</span><span style="color:#E36209;">Browser</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Returns LoginIntent&#39;s client_secret</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">Browser</span><span style="color:#D73A49;">-&gt;&gt;</span><span style="color:#E36209;">Code Sequencer</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Open message stream at rendezvous value</span></span></code></pre></div><p>The login flow is similar to the payment flow, but instead of a payment Intent, you&#39;ll be creating a login Intent. The login Intent is a higher-level abstraction that represents a user&#39;s Intent to log in to a website or application.</p><p>The protobuf definition for <a href="https://github.com/code-payments/code-protobuf-api/blob/05e5a67f9e57da8cdeaac122b0256cb997459a69/proto/messaging/v1/messaging_service.proto#L318-L342" target="_blank" rel="noreferrer">RequestToLogin</a> is as follows:</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">syntax</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;proto3&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Domain</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> domain </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SolanaAccountId</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">bytes</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Signature</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">bytes</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RendezvousKey</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">bytes</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageId</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bytes</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">MessageId</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Signature</span><span style="color:#E1E4E8;"> send_message_request_signature </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">oneof</span><span style="color:#E1E4E8;"> kind {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">RequestToLogin</span><span style="color:#E1E4E8;"> request_to_login </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RequestToLogin</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">Domain</span><span style="color:#E1E4E8;"> domain </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">SolanaAccountId</span><span style="color:#E1E4E8;"> verifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">Signature</span><span style="color:#E1E4E8;"> signature </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">RendezvousKey</span><span style="color:#E1E4E8;"> rendezvous_key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">syntax</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;proto3&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Domain</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> domain </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SolanaAccountId</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">bytes</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Signature</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">bytes</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RendezvousKey</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">bytes</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageId</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bytes</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">MessageId</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Signature</span><span style="color:#24292E;"> send_message_request_signature </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">oneof</span><span style="color:#24292E;"> kind {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">RequestToLogin</span><span style="color:#24292E;"> request_to_login </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">message</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RequestToLogin</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">Domain</span><span style="color:#24292E;"> domain </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">SolanaAccountId</span><span style="color:#24292E;"> verifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">Signature</span><span style="color:#24292E;"> signature </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">RendezvousKey</span><span style="color:#24292E;"> rendezvous_key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>You can construct a login Intent using similar logic as the payment Intent, but with the <a href="https://github.com/code-payments/code-protobuf-api/blob/05e5a67f9e57da8cdeaac122b0256cb997459a69/proto/messaging/v1/messaging_service.proto#L318-L342" target="_blank" rel="noreferrer">RequestToLogin</a> protobuf definition.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Use the <a href="https://github.com/code-payments/code-sdk/blob/main/packages/intents/src/intents/LoginRequestIntent.ts#L82-L139" target="_blank" rel="noreferrer">TypeScript</a> version as a reference for constructing the binary blob.</p></div><h2 id="contributing" tabindex="-1">Contributing <a class="header-anchor" href="#contributing" aria-label="Permalink to &quot;Contributing&quot;">​</a></h2><p>If you&#39;re interested in contributing to the Code SDK, or one of our variants, please reach out to us on <a href="https://discord.gg/T8Tpj8DBFp" target="_blank" rel="noreferrer">Discord</a> or <a href="https://twitter.com/getcode" target="_blank" rel="noreferrer">Twitter</a>. We&#39;re always looking for help with new SDK features, documentation, and examples.</p><p>If there is a feature that you need that isn&#39;t supported by the SDKs yet, it is likely that someone else needs it too. We can work together to add the feature to the SDKs.</p>`,104),e=[o];function t(c,r,y,E,i,d){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{F as __pageData,h as default};
