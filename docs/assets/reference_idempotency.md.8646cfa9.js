import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.0c8e00f4.js";const m=JSON.parse('{"title":"Idempotency","description":"","frontmatter":{},"headers":[],"relativePath":"reference/idempotency.md","filePath":"reference/idempotency.md"}'),t={name:"reference/idempotency.md"},o=e(`<h1 id="idempotency" tabindex="-1">Idempotency <a class="header-anchor" href="#idempotency" aria-label="Permalink to &quot;Idempotency&quot;">​</a></h1><p>Sometimes it is desirable to ensure that a particular action is carried out only once. This unique execution assurance is usually referred to as <code>idempotency</code>.</p><p>Take, for instance, the world of online gaming. Here, players often engage in frequent, small-value transactions to acquire in-game items or advantages. When a gamer decides to purchase an in-game asset, it&#39;s crucial that the transaction process is seamless.</p><p>Imagine a scenario where a player is making a purchase in a game integrated with the Code SDK. They pay for an in-game item but a technical hiccup, like the game&#39;s server going down, interferes with the transaction. As a result, the payment is processed, but the player doesn&#39;t receive the item they&#39;ve paid for. This situation is not just a source of frustration, it can diminish trust in both the game and the payment system.</p><p>In the absence of idempotency:</p><ol><li>There&#39;s potential for players to pay for items but not receive them due to issues on the game&#39;s services.</li><li>Players lack an efficient way to validate their purchase if they attempt to re-issue the same intent, potentially being charged again.</li></ol><h2 id="transactions-with-idempotency" tabindex="-1">Transactions with Idempotency <a class="header-anchor" href="#transactions-with-idempotency" aria-label="Permalink to &quot;Transactions with Idempotency&quot;">​</a></h2><p>To address these challenges, the Code app SDK offers a mechanism to produce payment intents using an <code>idempotencyKey</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Create intent (notify the Code Sequencer that you want to receive a payment)</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/create-intent&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Crafting a payment intent for an in-game item</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">clientSecret</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> code.paymentIntents.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    amount: </span><span style="color:#79B8FF;">0.25</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    currency: </span><span style="color:#9ECBFF;">&#39;usd&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    destination: </span><span style="color:#9ECBFF;">&#39;E8otxw1CVX9bfyddKu3ZB3BVLa4VVF9J7CTPdnUwT9jR&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Utilizing the game and item IDs to form a deterministic idempotencyKey</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    idempotencyKey: </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">game</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">}-\${</span><span style="color:#E1E4E8;">item</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// This value needs to be sent to the browser so that the browser can use it</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// to setup a payment with this intent instance.</span></span>
<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">({ clientSecret });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Create intent (notify the Code Sequencer that you want to receive a payment)</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/create-intent&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Crafting a payment intent for an in-game item</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">clientSecret</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> code.paymentIntents.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    amount: </span><span style="color:#005CC5;">0.25</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    currency: </span><span style="color:#032F62;">&#39;usd&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    destination: </span><span style="color:#032F62;">&#39;E8otxw1CVX9bfyddKu3ZB3BVLa4VVF9J7CTPdnUwT9jR&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Utilizing the game and item IDs to form a deterministic idempotencyKey</span></span>
<span class="line highlighted"><span style="color:#24292E;">    idempotencyKey: </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">game</span><span style="color:#032F62;">.</span><span style="color:#24292E;">id</span><span style="color:#032F62;">}-\${</span><span style="color:#24292E;">item</span><span style="color:#032F62;">.</span><span style="color:#24292E;">id</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// This value needs to be sent to the browser so that the browser can use it</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// to setup a payment with this intent instance.</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">({ clientSecret });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>See a full example <a href="./../example/payment-verification.html">here</a>.</p><hr><p>By incorporating the <code>idempotencyKey</code> with specific game and item IDs:</p><ul><li><p>Players purchases are singular. Any effort to replicate the transaction will fail.</p></li><li><p>Should any interruptions occur during the buying process, like server outages or communication failures, the transaction can be re-validated without the threat of repeated charges.</p></li></ul>`,13),p=[o];function l(c,r,i,y,E,d){return n(),a("div",null,p)}const u=s(t,[["render",l]]);export{m as __pageData,u as default};
